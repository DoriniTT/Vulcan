#!/usr/bin/env python
import os
import subprocess as sb
import matplotlib.pyplot as plt
import argparse
from ase.io import read, write

plt.rcParams["figure.figsize"] = (15,10)

parser = argparse.ArgumentParser(description='Get the forces on the atoms based on a specified criteria.')
parser.add_argument('-c', '--criteria', type=float, help='Criteria for the forces')
parser.add_argument('-pf', '--p_forces', type=bool, help='True or False to plot the forces')
args = parser.parse_args()

def forces(criteria, plot_forces, gnuplot=False):

    outcar = read("OUTCAR", format="vasp-out")

    x = [i[0] for i in outcar.get_forces()]
    y = [i[1] for i in outcar.get_forces()]
    z = [i[2] for i in outcar.get_forces()]

    if criteria:
        print("Chemical symbol | Element number | x (A) | y (A) | z(A) | x (eV*A) | y (eV*A) | z (eV*A)")
        for n, (i, j, k) in enumerate(zip(x, y, z)):
            if (i > criteria) or (j > criteria) or (k > criteria):
                print(outcar.get_chemical_symbols()[n], n, outcar.get_positions()[n][0], outcar.get_positions()[n][1], outcar.get_positions()[n][2], i, j, k)

    if plot_forces == True:
        
        sb.run(["grad2 OUTCAR | awk '{ print $2, $12, $10, $8, $6 }' > results.txt"], shell=True)
        with open("results.txt", "r") as f:
            lines = f.readlines()
        print(lines)

        del lines[-1]
        iteration = [ int(x.split(' ')[0]) for x in lines ]
        forces = [ float(x.split(' ')[1]) for x in lines ]
        avg_forces = [ float(x.split(' ')[2]) for x in lines ]
        log_energy = [ float(x.split(' ')[3]) for x in lines ]
        energy = [ float(x.split(' ')[4]) for x in lines ]

        fig, (ax1, ax2, ax3) = plt.subplots(3, 1)

        ax1.plot(iteration, forces, label="Max force")
        ax1.set(ylabel='Max force (eV/A)')
        ax1.legend(loc="best")
        ax1.grid()

        ax2.plot(iteration, avg_forces, label="Avg force", color="red")
        ax2.set(ylabel='Avg force (eV/A)')
        ax2.legend(loc="best")
        ax2.grid()

        ax3.plot(iteration, log_energy, label="log$_{10}$dE", color="black")
        ax3.set(xlabel='Iterations', ylabel='log$_{10}$dE')
        ax3.legend(loc="best")
        ax3.grid()

        plt.show()

        sb.run(["rm results.txt"], shell=True)

        if gnuplot == True:
            file_gnuplot = '''plot "results.txt" u 2:12 w l
pause -1    
            '''
            with open("plotload", "w") as f:
                f.write(file_gnuplot)

            sb.run(["gnuplot 'plotload'"], shell=True)
            sb.run(["rm plotload results.txt"], shell=True)

if __name__ == '__main__':
    forces(args.criteria, args.p_forces)
