#!/usr/bin/env python
import os
import numpy as np
import argparse
import subprocess as sb
from ase.db import connect
from ase.visualize import view
from ase.utils.xrdebye import XrDebye
from ase.io import read, write

parser = argparse.ArgumentParser(description='Getting information from a database of atoms')
parser.add_argument('-f', '--filename', type=str, help='Name of the database file')
parser.add_argument('-ids', '--id_list', nargs='+', help="give a list of id's to visualise, ex: 1 3 6")
parser.add_argument('-im', '--images', type=bool, help="write png with the structures")
parser.add_argument('-v', '--visualize', type=bool, help="visualize structures (True or False)")
parser.add_argument('-e', '--energies_index', type=bool, help="If True, plot energy vs index")
parser.add_argument('-xr', '--xray', type=bool, help="If True get the xray of the structure. Still does not work for Al!!")
args = parser.parse_args()

def database(db_file, xray, idlist=[], write_images=False, v=True, plot_energy=False):

    db = connect(db_file)
    c = db.count()
    print('There are {} structures in this database!'.format(c))

    print('ID | Formula | T. Energy (eV) | Max force (eV/A) | a (A) | b (A) | c (A)')
    all_energies = []
    for i in range(c+1):
        all_forces = []
        for row in db.select(id=i):
            # getting max force:
            all_forces.append(row.forces)
            a_forces = np.array(all_forces)
            maxval = np.max(a_forces)

            #getting max energy
            all_energies.append(row.energy)

            print(str(row.id)+'   '+row.formula+'   '+str(row.energy)+'   '+str(round(maxval,3))+'  '\
                  +str(round(row.cell[0][0],2))+' '+str(round(row.cell[1][1],2))+' '+str(round(row.cell[2][2],2)))

    if plot_energy == True:
        with open("index_energy.txt", "w") as f:
            index = list(range(len(all_energies)))
            index = [ x+1 for x in index ]
            print(index)
            print(all_energies)
            lis = [index, all_energies]
            for x in zip(*lis):
                f.write("{0}\t{1}\n".format(*x))
        import matplotlib.pyplot as plt
        fig, ax = plt.subplots()
        zmin = np.min(all_energies)
        mask = np.array(all_energies) == zmin
        color = np.where(mask, 'red', 'blue')
        ax.scatter(index, all_energies, color=color)
        ax.set(xlabel='Index', ylabel='Energy (eV)')
        ax.grid()
        plt.text(index[1]+0.05, all_energies[1]+0.05, "Best structure", fontsize=9)
        if not os.path.isdir("images"):
            sb.run(["mkdir images"], shell=True)
        fig.savefig("images/energy.png")
        plt.show()

    print("\n")
    print("Only valuable for structures with the same composition:")
    print("The structure {} is the most stable with the total energy of {} eV".format(all_energies.index(min(all_energies))+1, min(all_energies)))

    if idlist:
        for n, i in enumerate(idlist):
            s = db.get_atoms(id=i)
            s.wrap()
            if v == True:
                view(s)
            if write_images == True:
                if not os.path.isdir("images"):
                    sb.run(["mkdir images"], shell=True)
                #write("images/"+s.get_chemical_formula(mode='hill')+"_"+str(n)+".png", s)
                write("images/"+s.get_chemical_formula(mode='hill')+"_"+str(n)+".png", s, rotation=("-30y, 15x"))
            if xray == True:
                xrd = XrDebye(atoms=s, wavelength=1.54059)
                xrd.calc_pattern(x=np.arange(20, 80, 0.1), mode='XRD')
                xrd.plot_pattern(show=True)

def search_structure(struc_id):

    s = db.get_atoms(id=struc_id)
    return s

if __name__ == '__main__':
    database(args.filename, args.xray, args.id_list, args.images, args.visualize, args.energies_index)
